***************************
***	Ubuntu system setup	***
***************************
sudo apt install git


sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo apt-get install oracle-java8-set-default

sudo apt-get install make

sudo apt install g++

install kdiff


-----------------------------------
---	virtualbox shared folder	---
-----------------------------------

sudo su -
cd /media/sf_home

sudo usermod -aG vboxsf krzysztof

sudo adduser krzysztof vboxsf

*******************
***	dos2unix	***
*******************
In case of following error when invoking *.sh file:

krzysztof@krzysztof-VirtualBox:~/home/projects/Main/WaterMill/scripts/linux$ ./runMake.sh
bash: ./runMake.sh: /bin/sh^M: bad interpreter: No such file or directory

Use dos2unix

sudo apt install dos2unix

dos2unix runMake.sh 


***********************
***	Eclipse Linux	***
***********************
File -> Import -> File system 
From directory:
C:\home\myImportantFiles\projects\git\Main\WaterMill
docs
media
source


Advanced:
Create links in workspace: true
Create virtual folders: true
Create link locations relative to: PROJECT_LOC

Project -> Properties -> C/C++ Build -> Settings -> Build Artifact
Artifact extension: - // previous version was exe, do not add any extension

Project -> Properties -> C/C++ Build -> Settings -> Tool Settings ->
GCC C++ Compiler -> Dialect -> Language standard: 
ISO C++11 (-std=c++0x)


Project -> Properties -> C/C++ Build -> Settinmgs -> Tool Settings ->
GCC C++ Compiler -> Miscellaneous -> Other flags: (add -fno-stack-protector)
-c -fmessage-length=0 -fno-stack-protector

GCC C++ Compiler -> Debugging -> Debug Level
(Default -g)

C/C++ General -> Paths and Symbols -> Includes -> GNU C++
/usr/local/include
/usr/include/freetype

Project -> Properties -> C/C++ General -> Paths and Symbols -> Library Path
/usr/local/lib


Project -> Properties -> C/C++ General -> Paths and Symbols -> Libraries


pthread
dl

glut
(link to \usr\lib\x86_64-linux-gnu\libglut.a)
GL
(link to \usr\lib\x86_64-linux-gnu\libGL.so)
GLU
(link to \usr\lib\x86_64-linux-gnu\libGLU.a)


A) Boost:
boost_system
(link to \usr\lib\x86_64-linux-gnu\libboost_system.a)	
B) Boost:
boost_filesystem
(link to \usr\lib\x86_64-linux-gnu\libboost_filesystem.a
C) Boost:
boost_locale
(link to \usr\lib\x86_64-linux-gnu\libboost_locale.a)
D) Boost:
boost_log
(link to \usr\lib\x86_64-linux-gnu\libboost_log.a)
E) Boost:
boost_thread
(link to \usr\lib\x86_64-linux-gnu\libboost_thread.a)
F) Boost:
boost_log_setup
(link to \usr\lib\x86_64-linux-gnu\libboost_log_setup.a)
G) Boost:
boost_iostreams
(link to \usr\lib\x86_64-linux-gnu\libboost_iostreams.a)

H) Boost:
boost_unit_test_framework
(link to \usr\lib\x86_64-linux-gnu\libboost_unit_test_framework.a)



lua
(link to \usr\local\lib\liblua.a)

sudo apt-get install lua






Debug Configurations
	C/C++ Application
		Watermill Debug_Linux

Project:
	Watermill
	
C/C++ Application:
	${project_path}/Debug_Linux/Watermill.exe
	Debug_Linux/Watermill.exe



Debug Configurations
	C/C++ Application
		Watermill Debug_Linux_Make

*******************
***	Messages	***
*******************
Install Poedit 2


Lub
cd ~/home/projects/Main/WaterMill/assets/strings/en/lc_messages
msgfmt --output watermill.mo watermill.po 

***********
***	GL	***
***********

glxinfo
sudo apt install mesa-utils

glxinfo | grep "OpenGL version"
OpenGL version string: 3.1 Mesa 20.0.4

sudo apt install mesa-common-dev
sudo apt autoremove

***************
***	GLFW	***
***************
sudo apt-get install libglfw3-dev libglfw3

Libraries installed to
/usr/lib/x86_64-linux-gnu/

libglfw.so
libglfw.so.3
libglfw.so.3.2



***********************************
***	GLFW source unsuccessfull	***
***********************************
download source package
https://www.glfw.org/download.html

~/home/glfw/glfw-3.2.1

sudo apt install cmake

cd home/glfw/glfw-3.2.1/
sudo apt-get install doxygen
sudo apt-get install xorg-dev
cmake .

krzysztof@krzysztof-VirtualBox:~/home/glfw/glfw-3.2.1$ cmake .
-- Using X11 for window creation
-- Configuring done
-- Generating done
-- Build files have been written to: /home/krzysztof/home/glfw/glfw-3.2.1

***************
***	GLEW	***
***************
download source package
https://sourceforge.net/projects/glew/

~/home/glew/glew-2.1.0.tgz
extract
copy ~/home/glew/glew-2.1.0/include/GL/glew.h, wglew.h
to
~/usr/include/GL/glew.h, wglew.h

cp /usr/include/GL 
sudo cp ~/home/glew/glew-2.1.0/include/GL/glew.h .
sudo cp ~/home/glew/glew-2.1.0/include/GL/wglew.h .


sudo apt-get install libglew2.1


Libraries installed to
/usr/lib/x86_64-linux-gnu/


libGLEW.so
libGLEW.so.2.1
libGLEW.so.2.1.0

sudo apt-get install libglew-dev

***********
***	GLM	***
***********

https://glm.g-truc.net/0.9.9/index.html
download as 
~/home/glm/glm-0.9.9.7.zip
unzip into
~/home/glm/glm/

cp /usr/include/
sudo cp -avr ~/home/glm/glm/glm/ ./glm

***********
***	LUA	***
***********

sudo apt install lua5.2
sudo apt remove lua5.2

Download lua 5.3.4
Unzip

sudo apt-get install libreadline-dev

cd /home/krzysztof/home/utils/lua-5.3.4
sudo make linux install

Installs lua.exe, luac.exe, lua.h into
/usr/local/bin/lua*
/usr/local/include/lua.h
/usr/local/lib/liblua.a
/usr/local/lib.lua/5.3

***************
***	Boost	***
***************

sudo apt-get install libboost-all-dev

installs
/usr/include/boost

sudo apt-get install libjpeg-dev


***********************
***	Freeglut Failed	***
***********************
sudo apt-get install freeglut3-dev

/usr/include/GL



Following functions do not work in Ubuntu:

	glutKeyboardFunc(keyboard_handler::onKeyboardFunc);
	glutKeyboardUpFunc(keyboard_handler::onKeyboardUpFunc);
	glutSpecialFunc(keyboard_handler::onSpecialFunc);
	glutSpecialUpFunc(keyboard_handler::onSpecialUpFunc);

	glutMouseFunc(pointer_handler::onMouseFunc);
	glutMotionFunc(pointer_handler::onMotionFunc);
	glutPassiveMotionFunc(pointer_handler::onPassiveMotionFunc);
	glutMouseWheelFunc(pointer_handler::onMouseWheelFunc);
	


*******************
***	Boost 1.67	***
*******************

Upgrade boost from 1.5.8 to 1.67 version

current version of boost
ls /usr/lib/x86_64-linux-gnu/libboost_system.so.1.58.0

include headers:
ls /usr/include/boost

sudo apt-get install libboost-all-dev
installs 1.5.8 version

https://www.boost.org/users/download/

~/home/utils/boost_1_67_0.tar.gz

cd ~/home/utils/boost_1_67_0

. ./bootstrap.sh
./b2

The Boost C++ Libraries were successfully built!

The following directory should be added to compiler include paths:

    /home/krzysztof/home/utils/boost_1_67_0

The following directory should be added to linker library paths:

    /home/krzysztof/home/utils/boost_1_67_0/stage/lib


*******************
***	BaseGame	***
*******************

Debug Configurations
	C/C++ Application
		BaseGame Debug_Linux

BaseGame -> properties
	Properties for BaseGame
		C/C++ Build
			Settings -> Build Artifact
				Static Library
			Settings
			 GCC C++ Compiler -> Dialect
					ISO C++11 (-std=c++0x)


***********************************
***	Custom Makefile Watermill	***
***********************************

Build Configuration: Debug_Linux_Make

Watermill -> properties
	Properties for Watermill
		C/C++ Build
			Tool Chain Editor
				Current toolchain: Linux GCC
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/Watermill/scripts/linux}/runMake.sh 
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/Watermill/scripts/linux}

Run Configurations -> Variables ...
	Edit Variables -> New ...
	Variable: watermill_make
	Value: /home/krzysztof/home/projects/Main/WaterMill/settings/make/Debug_Linux_Make


Run configuration:
	Name: Watermill-make
	Project: Watermill
	C/C++ Application:
	
	${watermill_make}\Watermill
	Build Configuration: Debug_Linux_Make

***********************************
***	Custom Makefile BaseGame	***
***********************************

Build Configuration: Debug_Linux_Make

BaseGame -> properties
	Properties for BaseGame
		C/C++ Build
			Tool Chain Editor
				Current toolchain: Linux GCC
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/BaseGame/scripts/linux}/runMake.sh 
				
			runMake.sh must have executable permissions
				
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/BaseGame/scripts/linux}


***************************************
***	Custom Makefile BaseGameTest	***
***************************************

Build Configuration: Debug_Linux_Make

BaseGameTest -> properties
	Properties for BaseGameTest
		C/C++ Build
			Tool Chain Editor
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/BaseGameTest/scripts/linux}/runMake.sh 
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/BaseGameTest/scripts/linux}

Run Configurations -> Variables ...
	Edit Variables -> New ...
	Variable: basegametest_make
	Value: C:\Users\Krzysztof\home\myImportantFiles\projects\git\Main\BaseGameTest\settings\make\Debug_MinGW64
	Value: /home/krzysztof/home/projects/Main/WaterMill/settings/make/Watermill/Debug_Linux_Make


Run configuration:
	Name: BaseGameTest-make
	Project: Watermill
	C/C++ Application:
	
	${basegametest_make}/BaseGameTest
	Build Configuration: Debug_Linux_Make
	

***************************************
***	Eclipse Ubuntu Desktop Shortcut	***
***************************************


cd ~/Desktop
touch 'Eclipse CDT'

Edit:

[Desktop Entry]
Name=Custom location
Comment=Location
Exec=/home/krzysztof/home/utils/eclipse-cpp-oxygen-3/eclipse
Icon=/home/krzysztof/home/utils/eclipse-cpp-oxygen-3/icon.xpm
Terminal=false
Type=Application
StartupNotify=false
Name[en_US]=Eclipse CDT

Rename to
'Eclipse CDT.desktop'

***********************
***	Mingw64 Errors	***
***********************

Ignore following problems:

Description: Program "C:msys64mingw64bing++" not found in PATH	
Resource: BaseGame		
Location: Project Properties, C++ Preprocessor Include.../Providers, [CDT GCC Built-in Compiler Settings MinGW] options	
Type: C/C++ Scanner Discovery Problem


Description: Program "C:msys64mingw64bing++" not found in PATH
Resource: Watermill
Path:	
Location: Project Properties, C++ Preprocessor Include.../Providers, [CDT GCC Built-in Compiler Settings MinGW] options	
Type: C/C++ Scanner Discovery Problem

***************************************
***	Linux/Windows .cproject diff	***
***************************************

Following files change when are opened in linux / windows

BaseGameTest/.cproject
Watermill/settings/eclipse/Watermill/.cproject

-						<entry flags="VALUE_WORKSPACE_PATH" kind="libraryPath" name="/BaseGame/Debug_MinGW64"/>
+						<entry flags="VALUE_WORKSPACE_PATH" kind="libraryPath" name="/BaseGame/scripts/linux"/>

***************
***	Bash	***
***************

cd ~/home/projects/Main/WaterMill/scripts/linux
sed -i -e 's/\r$//' runMake.sh 
sed -i -e 's/\r$//' runWatermill.sh 


cd ~/home/projects/Main/BaseGame/scripts/linux
sed -i -e 's/\r$//' runMake.sh 

cd ~/home/projects/Main/BaseGameTest/scripts/linux
sed -i -e 's/\r$//' runMake.sh 

cd ~/home/projects/Main/WaterMillBase/scripts/linux
sed -i -e 's/\r$//' runMake.sh 

cd ~/home/projects/Main/WaterMillBaseTest/scripts/linux
sed -i -e 's/\r$//' runMake.sh 

cd ~/home/projects/Main/WaterMill/assets/shaders
sed -i -e 's/\r$//' *


