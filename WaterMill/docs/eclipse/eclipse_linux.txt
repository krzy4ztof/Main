***************************
***	Ubuntu system setup	***
***************************
sudo apt install git


sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo apt-get install oracle-java8-set-default

sudo apt-get install make

sudo apt install g++

install kdiff


-----------------------------------
---	virtualbox shared folder	---
-----------------------------------

sudo su -
cd /media/sf_home

sudo usermod -aG vboxsf krzysztof

sudo adduser krzysztof vboxsf



***********************
***	Eclipse Linux	***
***********************
File -> Import -> File system 
From directory:
C:\home\myImportantFiles\projects\git\Main\WaterMill
docs
media
source


Advanced:
Create links in workspace: true
Create virtual folders: true
Create link locations relative to: PROJECT_LOC

Project -> Properties -> C/C++ Build -> Settings -> Build Artifact
Artifact extension: - // previous version was exe, do not add any extension

Project -> Properties -> C/C++ Build -> Settings -> Tool Settings ->
GCC C++ Compiler -> Dialect -> Language standard: 
ISO C++11 (-std=c++0x)


Project -> Properties -> C/C++ Build -> Settinmgs -> Tool Settings ->
GCC C++ Compiler -> Miscellaneous -> Other flags: (add -fno-stack-protector)
-c -fmessage-length=0 -fno-stack-protector

GCC C++ Compiler -> Debugging -> Debug Level
(Default -g)

C/C++ General -> Paths and Symbols -> Includes -> GNU C++
/usr/local/include

Project -> Properties -> C/C++ General -> Paths and Symbols -> Library Path
/usr/local/lib


Project -> Properties -> C/C++ General -> Paths and Symbols -> Libraries


pthread
dl

glut
(link to \usr\lib\x86_64-linux-gnu\libglut.a)
GL
(link to \usr\lib\x86_64-linux-gnu\libGL.so)
GLU
(link to \usr\lib\x86_64-linux-gnu\libGLU.a)


A) Boost:
boost_system
(link to \usr\lib\x86_64-linux-gnu\libboost_system.a)	
B) Boost:
boost_filesystem
(link to \usr\lib\x86_64-linux-gnu\libboost_filesystem.a
C) Boost:
boost_locale
(link to \usr\lib\x86_64-linux-gnu\libboost_locale.a)
D) Boost:
boost_log
(link to \usr\lib\x86_64-linux-gnu\libboost_log.a)
E) Boost:
boost_thread
(link to \usr\lib\x86_64-linux-gnu\libboost_thread.a)
F) Boost:
boost_log_setup
(link to \usr\lib\x86_64-linux-gnu\libboost_log_setup.a)
G) Boost:
boost_iostreams
(link to \usr\lib\x86_64-linux-gnu\libboost_iostreams.a)

H) Boost:
boost_unit_test_framework
(link to \usr\lib\x86_64-linux-gnu\libboost_unit_test_framework.a)



lua
(link to \usr\local\lib\liblua.a)

sudo apt-get install lua






Debug Configurations
	C/C++ Application
		Watermill Debug_Linux

Project:
	Watermill
	
C/C++ Application:
	${project_path}/Debug_Linux/Watermill.exe
	Debug_Linux/Watermill.exe



Debug Configurations
	C/C++ Application
		Watermill Debug_Linux_Make

<<<<<<< HEAD
***********
***	LUA	***
***********

sudo apt install lua5.2
sudo apt remove lua5.2

Download lua 5.3.4
Unzip

sudo apt-get install libreadline-dev

cd /home/krzysztof/home/utils/lua-5.3.4
sudo make linux install

Installs lua.exe, luac.exe, lua.h into
/usr/local/bin/lua*
/usr/local/include/lua.h
/usr/local/lib/liblua.a
/usr/local/lib.lua/5.3


=======
>>>>>>> master
***************
***	Boost	***
***************

<<<<<<< HEAD
sudo apt-get install libboost-all-dev

installs
/usr/include/boost

*******************
***	Freeglut	***
*******************
sudo apt-get install freeglut3-dev

/usr/include/GL


*******************
***	Boost 1.67	***
*******************

=======
>>>>>>> master
Upgrade boost from 1.5.8 to 1.67 version

current version of boost
ls /usr/lib/x86_64-linux-gnu/libboost_system.so.1.58.0

include headers:
ls /usr/include/boost

sudo apt-get install libboost-all-dev
installs 1.5.8 version

https://www.boost.org/users/download/

~/home/utils/boost_1_67_0.tar.gz

cd ~/home/utils/boost_1_67_0

. ./bootstrap.sh
./b2

The Boost C++ Libraries were successfully built!

The following directory should be added to compiler include paths:

    /home/krzysztof/home/utils/boost_1_67_0

The following directory should be added to linker library paths:

    /home/krzysztof/home/utils/boost_1_67_0/stage/lib


*******************
***	BaseGame	***
*******************

Debug Configurations
	C/C++ Application
		BaseGame Debug_Linux

BaseGame -> properties
	Properties for BaseGame
		C/C++ Build
			Settings -> Build Artifact
				Static Library
			Settings
			 GCC C++ Compiler -> Dialect
					ISO C++11 (-std=c++0x)


***********************************
***	Custom Makefile Watermill	***
***********************************

Build Configuration: Debug_Linux_Make

Watermill -> properties
	Properties for Watermill
		C/C++ Build
			Tool Chain Editor
				Current toolchain: Linux GCC
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/Watermill/scripts/linux}/runMake.sh 
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/Watermill/scripts/linux}

Run Configurations -> Variables ...
	Edit Variables -> New ...
	Variable: watermill_make
	Value: /home/krzysztof/home/projects/Main/WaterMill/settings/make/Watermill/Debug_Linux_Make


Run configuration:
	Name: Watermill-make
	Project: Watermill
	C/C++ Application:
	
	${watermill_make}\Watermill
<<<<<<< HEAD
	Build Configuration: Debug_Linux_Make
=======
	Build COnfiguration: Debug_Linux_Make
>>>>>>> master


***********************************
***	Custom Makefile BaseGame	***
***********************************

Build Configuration: Debug_Linux_Make

BaseGame -> properties
	Properties for BaseGame
		C/C++ Build
			Tool Chain Editor
				Current toolchain: Linux GCC
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/BaseGame/scripts/linux}/runMake.sh 
				
			runMake.sh must have executable permissions
				
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/BaseGame/scripts/linux}


***************************************
***	Custom Makefile BaseGameTest	***
***************************************

Build Configuration: Debug_Linux_Make

BaseGameTest -> properties
	Properties for BaseGameTest
		C/C++ Build
			Tool Chain Editor
				Current builder: (old - CDT Internal Builder) 
				  Gnu Make Builder
		C/C++ Build
			Use default build command: false
			Build command: (old - make)
				${workspace_loc:/BaseGameTest/scripts/linux}/runMake.sh 
				
			Generate Makefiles automatically - false 
				
			Build directory:	
				${workspace_loc:/BaseGameTest/scripts/linux}

Run Configurations -> Variables ...
	Edit Variables -> New ...
	Variable: basegametest_make
	Value: C:\Users\Krzysztof\home\myImportantFiles\projects\git\Main\BaseGameTest\settings\make\BaseGameTest\Debug_MinGW64
	Value: /home/krzysztof/home/projects/Main/WaterMill/settings/make/Watermill/Debug_Linux_Make


Run configuration:
<<<<<<< HEAD
	Name: BaseGameTest-make
	Project: Watermill
	C/C++ Application:
	
	${basegametest_make}/BaseGameTest
	Build Configuration: Debug_Linux_Make
	

***************************************
***	Eclipse Ubuntu Desktop Shortcut	***
***************************************


cd ~/Desktop
touch 'Eclipse CDT'

Edit:

[Desktop Entry]
Name=Custom location
Comment=Location
Exec=/home/krzysztof/home/utils/eclipse-cpp-oxygen-3/eclipse
Icon=/home/krzysztof/home/utils/eclipse-cpp-oxygen-3/icon.xpm
Terminal=false
Type=Application
StartupNotify=false
Name[en_US]=Eclipse CDT

Rename to
'Eclipse CDT.desktop'
=======
	Name: BaseGameTest-make.exe
	Project: Watermill
	C/C++ Application:
	
	${basegametest_make}/BaseGameTest.exe
	Build COnfiguration: Debug_Linux_Make
	

>>>>>>> master

